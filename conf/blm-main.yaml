hydra:
  job:
    chdir: True

logger:
  use_log_filename_prefix: false
  log_filename_prefix: "/var/log/babylm"
  excluded_handlers: []

validate_config:
  strict: False

preprocess:
  input_folder_path_10m: "data/raw/train_10M/GPT2/"
  interim_folder_path_10m: "data/interim/train_10M/GPT2/"
  output_folder_path_10m: "data/processed/train_10M/GPT2"
  tokenizer_model_path_10m: "models/tokenizer/train_10M/GPT2"
  use_trained_tokenizer: False
  text_split_pattern: r"""'(?i:[sdmt]|ll|ve|re)|[^\r\n\p{L}\p{N}]?+\p{L}+|\p{N}{1,3}| ?[^\s\p{L}\p{N}]++[\r\n]*|\s*[\r\n]|\s+(?!\S)|\s+"""
  vocab_size: 50257

train:
  out_dir: 'models/gpt-2/train_10M'
  in_dir: "data/processed/train_10M/GPT2"
  tokenizer_path: "models/tokenizer/train_10M/GPT2/tokenizer_10M-vocab.json" 
  eval_interval: 50
  log_interval: 1
  eval_iters: 40
  eval_only: False # if True, script exits right after the first eval
  always_save_checkpoint: True # if True, always save a checkpoint after each eval
  init_from: 'scratch' # 'scratch' or 'resume' or 'gpt2*'
  ckpt_path: ''
  gradient_accumulation_steps: 40 # used to simulate larger batch sizes
  batch_size: 12 # if gradient_accumulation_steps > 1, this is the micro-batch size
  block_size: 256
  n_layer: 4
  n_head: 4
  n_embd: 768
  dropout: 0.0 # for pretraining 0 is good, for finetuning try 0.1+
  bias: False # do we use bias inside LayerNorm and Linear layers?
  learning_rate: 0.001 # max learning rate
  max_iters: 1000 # total number of training iterations
  weight_decay: 0.1
  beta1: 0.9
  beta2: 0.95
  grad_clip: 1.0 # clip gradients at this value, or disable if == 0.0
  decay_lr: True # whether to decay the learning rate
  warmup_iters: 10 # how many steps to warm up for
  lr_decay_iters: 1000 # should be ~= max_iters per Chinchilla
  min_lr: 0.0001 # minimum learning rate, should be ~= learning_rate/10 per Chinchilla
  wandb_log: True
  wandb_project: 'baby_lm_WML'
  wandb_run_name: 'GPT2_base_WML'
  # DDP settings
  backend: 'nccl' # 'nccl', 'gloo', etc.
  # system
  device: 'cuda:0' # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks
  dtype: 'float16' # 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler
  compile: True # use PyTorch 2.0 to compile the model to be faster

WML:
  checkpoint_path: "train_10M/GPT2_base_WML1000_ckpt.pt"
  num_peers: 3 
  bayesian_init_points: 20
  bayesian_n_iter: 100
  prune_ratio_range: [0.5,0.7]
  grad_clip: 1.0
  prune_importance: 'l1'
  layer_bound: 0.9
  batch_size: 12
  num_epochs: 1000
  loss_alpha: 0.5
  num_batches: 20
  warmup_iters: 5
  learning_rate: 0.5
  lr_decay_iters: 1000
  min_lr: 0.01
  enable_early_stopping: True
  early_stopping_min_delta: 2.596 #based on mean+3*std of train-val loss experiments
  shuffle: True
  wandb_log: True
  ddp: False
  wandb_project: baby_lm_WML
  wandb_run_name: 'GPT2_WML'
  model_output_path: "models/WML"
  weight_update_frequency: 25

MRL:
  enable: True
  efficient: False
  emb_dim: [768,384,192,96,48]
  relative_importance: [1,1,1,1,1]

eval:
  model_path: "airesearchers/baby_lm/model-checkpoints:v0"
  eval_blimp: True
  output_dir: "/data/output"
  model_local_path: "/models/gpt-2"
  eval_tasks: ['blimp_filtered']
  batch_size: 128